package com.demobookstore.utils;

import java.sql.Connection;

import javax.servlet.ServletRequest;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyUtils {

	public static final String ATT_NAME_CONNECTION = "ATTRIBUTE_FOR_CONNECTION";

	private static final String ATT_NAME_USER_NAME = "ATTRIBUTE_FOR_STORE_USER_NAME_IN_COOKIE";

	// L∆∞u tr·ªØ Connection v√†o attribute c·ªßa request.
	// Th√¥ng tin l∆∞u tr·ªØ n√†y ch·ªâ t·ªìn t·∫°i trong th·ª?i gian y√™u c·∫ßu (request)
	// cho t·ªõi khi d·ªØ li·ªáu ƒë∆∞·ª£c tr·∫£ v·ª? tr√¨nh duy·ªát ng∆∞·ª?i d√πng.
	public static void storeConnection(ServletRequest request, Connection conn) {
		request.setAttribute(ATT_NAME_CONNECTION, conn);
	}

	// L·∫•y ƒë·ªëi t∆∞·ª£ng Connection ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ trong attribute c·ªßa request.
	public static Connection getStoredConnection(ServletRequest request) {
		Connection conn = (Connection) request.getAttribute(ATT_NAME_CONNECTION);
		return conn;
	}

	public static String getUserNameInCookie(HttpServletRequest request) {
		Cookie[] cookies = request.getCookies();
		if (cookies != null) {
			for (Cookie cookie : cookies) {
				if (ATT_NAME_USER_NAME.equals(cookie.getName())) {
					return cookie.getValue();
				}
			}
		}
		return null;
	}

	// X√≥a Cookie c·ªßa ng∆∞·ª?i d√πng
	public static void deleteUserCookie(HttpServletResponse response) {
		Cookie cookieUserName = new Cookie(ATT_NAME_USER_NAME, null);
		// 0 gi√¢y. (Cookie n√†y s·∫Ω h·∫øt hi·ªáu l·ª±c ngay l·∫≠p t·ª©c)
		cookieUserName.setMaxAge(0);
		response.addCookie(cookieUserName);
	}

}